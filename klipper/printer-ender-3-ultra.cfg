# This file contains common pin mappings for the BIGTREETECH Manta E3EZ
# To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" "8 MHz crystal"
# and "USB (on PA11/PA12)" or "CAN bus (on PB12/PB13)".

# See docs/Config_Reference.md for a description of parameters.
# See docs/Config_Reference.md for a description of parameters.
[include mainsail.cfg]

[stepper_x]
step_pin: PA14
dir_pin: !PA10
enable_pin: !PA13
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC4
# from position endstop it needs 2mm to reach the builtplate
position_endstop: -2
# maximum position it can go without hitting anything or going out of linear rails
# position_max: 240
position_max: 255
# the minimum allowed position for movement
position_min: -2
homing_speed: 200


[stepper_y]
step_pin: PC8
dir_pin: !PA15
enable_pin: !PC14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PB0
# position_endstop: 0
# position_max: 235
# homing_speed: 50
# overrides ---
position_endstop: -5
position_max: 215
# position_min: -13
# -40.5
position_min: -5
homing_speed: 200

[stepper_z]
step_pin: PD2
dir_pin: !PD4
enable_pin: !PD3
microsteps: 16
rotation_distance: 8
endstop_pin: ^PC6
position_max: 230
position_min: -3
endstop_pin: probe:z_virtual_endstop
homing_speed: 25

[stepper_z1]
step_pin: PB7
dir_pin: !PB6
enable_pin: !PB4
microsteps: 16
rotation_distance: 8
endstop_pin: ^PC6
endstop_pin: probe:z_virtual_endstop

# [safe_z_home]
# home_xy_position: 115,115 # Change coordinates to the center of your print bed
# # speed: 50
# # home_xy_position: 147, 154
# speed: 75
# z_hop: 15
# z_hop_speed: 5
# # move_to_previous: true

[extruder]
step_pin: PD5
dir_pin: PD6
enable_pin: !PB3
microsteps: 16
# rotation_distance: 33.500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB11 #HE0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA4 #TH0
min_temp: 0
# max_temp: 250
# overrides ---
gear_ratio: 42:12
rotation_distance: 26.359
# max_temp: 250
max_temp: 300
pressure_advance: 0.0375
pressure_advance_smooth_time: 0.040000
max_extrude_cross_section: 5
max_extrude_only_distance: 50000.0
#control: pid
#pid_kp: 24.629
#pid_ki: 1.710
#pid_kd: 88.663


[filament_motion_sensor encoder_sensor]
detection_length: 3
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
extruder: extruder
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
switch_pin: PB1
# changing the switch_pin name according to your motherboard
pause_on_runout: True
#runout_gcode:
#insert_gcode:
#event_delay:
#pause_delay:

[heater_bed]
heater_pin: PB2 #HB
sensor_type: EPCOS 100K B57560G104F #Generic 3950
sensor_pin: PA3 #TB
#control: pid
# tuned for stock hardware with 50 degree Celsius target
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: PA8

[heater_fan fan1]
pin: PB15

[heater_fan fan2]
pin: PB14

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_3600560002504B5735313920-if00

[printer]
kinematics: cartesian
max_velocity: 500
# max_velocity: 200
# max_accel: 8000
# max_accel: 2000
max_accel: 3200
max_z_velocity: 25
max_z_accel: 50


########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
uart_pin: PB8
#diag_pin: PC4
# run_current: 0.800
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

[tmc2209 stepper_y]
uart_pin: PC9
#diag_pin: PB0
# run_current: 0.800
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

[tmc2209 stepper_z]
uart_pin: PD0
#diag_pin: PC6
# run_current: 0.650
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

[tmc2209 stepper_z1]
uart_pin: PB5
#diag_pin: PC6
# run_current: 0.650
run_current: 0.580
hold_current: 0.500
stealthchop_threshold: 999999

[tmc2209 extruder]
uart_pin: PD1
# run_current: 0.800
run_current: 0.650
hold_current: 0.500
stealthchop_threshold: 999999


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC1, EXP1_3=PC3, EXP1_5=PC0, EXP1_7=PA2, EXP1_9=<GND>,
    EXP1_2=PC2,  EXP1_4=<RST>, EXP1_6=PA0, EXP1_8=PA1, EXP1_10=<5V>

########################################
# BLTouch
########################################

# comment this if you are using eddy
# [bltouch]
# sensor_pin: PA6
# control_pin: PA7
# # x_offset: -40
# # y_offset: -10
# x_offset: -31.8
# # y_offset: -40.5
# y_offset: 0
# #z_offset:1.195
# #z_offset: 0
# # for clone bltouch ie. 3d touch v3
# # probe_with_touch_mode: false
# # pin_up_reports_not_triggered: true
# # for cr-touch
# probe_with_touch_mode: true
# stow_on_each_sample: false

#[output_pin PS_ON]
#pin: PA9

#[output_pin pb9_pin]
#pin: PB9

#[neopixel my_neopixel]
#pin: PC7

# [bed_mesh]
# speed: 120
# # speed: 500
# horizontal_move_z: 15
# # mesh_min: 10, 10
# # mesh_max: 190, 220
# # mesh_max: 180.5, 198.5
# # mesh_min: 20, 20
# mesh_min: 41.8,10
# # mesh_max: 200, 197
# # mesh_max: 188.2, 179.5
# # 20mm padding
# # mesh_max: 168.2, 159.5
# # mesh_max: 200,194
# # mesh_max: 215-31.8,228-40.5
# # mesh_max: 220-31.8,228-0
# mesh_max: 223,220
# # calculate xmin, ymin and max firs -> then this
# probe_count: 5,5
# algorithm: bicubic

########################################
# Z Tilt Gantry Leveling
########################################

[bed_screws]
screw1: 20,29
screw2: 195, 29
screw3: 195, 213
screw4: 20, 213

[z_tilt]
z_positions:
    66.5, 110
    235, 110
points:
    66.5, 110
    235, 110
speed: 300
retries: 6
# retry_tolerance: 0.02
retry_tolerance: 0.03
horizontal_move_z: 3

[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1

########################################
# User configuration
########################################

[virtual_sdcard]
path: ~/printer_data/gcodes

# adxl tutorials
# https://www.reddit.com/r/BIGTREETECH/comments/1453wcz/adxl345_via_spi_and_manta_e3ez_with_cb1_wiring/
# [ADXL345 and BIGTREETECH CB1 (Input Shaper Setup) 3docity] https://www.3docity.com.au/blogs/3dprinting/adxl345-and-bigtreetech-cb1-input-shaper-setup?srsltid=AfmBOoqhombF5CaMd_HNqqZgfTBwnGKY2dEj0piu3Ovq9l7_YDnsXwR1
########################################
# Resonance Compensation / ADXL
########################################

# [mcu rpi]
# serial: /tmp/klipper_host_mcu

# [adxl345]
# cs_pin: rpi:gpiochip0/gpio74
# spi_bus: spidev1.1

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#  100, 100, 20

# [input_shaper]
# shaper_freq_x: 43.8
# shaper_type_x: ei
# shaper_freq_y: 41.4
# shaper_type_y: ei
# done with SHAPER_CALIBRATE AXIS=X

########################################
########################################
########################################
# Eddy
########################################
########################################
########################################
# visit https://github.com/bigtreetech/Eddy


# The MCU section only applies to the Eddy USB. For Eddy Coil you will use the MCU name of the toolboard that you connected the Eddy Coil to.
# make clean to clean previously compiled firmware
[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044340310C49D1C-if00
restart_method: command

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 1.880
#i2c_address:
i2c_mcu: eddy  # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the MCU you have used.
i2c_bus: i2c0f # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the I2C bus you have used.
# Measure the offsets below using the method described here: https://www.klipper3d.org/Probe_Calibrate.html#calibrating-probe-x-and-y-offsets
# For a standard Voron stealthburner X carriage mount there should be no need to change the defaults below.
# manually calculated, might also use a 3d printed offset measurement / calibration tool
x_offset: -46.5
y_offset: -8.5

# This section is only relevant for Eddy USB. Comment it out for Eddy Coil.
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2.6

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu # Sets the type of sensor for Klipper to read
sensor_mcu: eddy # Sets the MCU of the eddy probe tempereature sensor
min_temp: 10 # Sets the minimum tempereature for eddys tempereature sensor to operate
max_temp: 100 # Sets the maximum tempereature for eddys tempereature sensor to operate

[bed_mesh]
# speed: 500
speed: 200
horizontal_move_z: 2.6
# ------------------------
# ------------------------
# probe offsets
# x_offset: -46.5
# y_offset: -8.5
# x axis
# position_min: -2
# position_max: 255
# y axis
# position_min: -20
# position_max: 220
# mesh_min: 56.5,18.5
# ------------------------
# ------------------------
mesh_min: 15,15
# max positions: 255,210
mesh_max: 208.5,201.5
# calculate xmin, ymin and max firs -> then this
probe_count: 30,30
algorithm: bicubic
# For the mesh dimensions below, the coordinates need to be reachable by the center of the probe. To calculate coordinates that will work, use the formula below:
# mesh x min = position_min_x + greater_of (15mm or x_offset) <--- in this term, only consider the x offset if it is positive, ignore if negative.
# mesh y min = position_min_y + greater_of (15mm or y_offset) <--- in this term, only consider the y offset if it is positive, ignore if negative.
# mesh x max = position_max_x - greater_of (15mm or |x_offset|) <--- in this term, only consider the x offset if it is negative, ignore if positive.
# mesh y max = position_max_y - greater_of (15mm or |y_offset|) <--- in this term, only consider the y offset if it is negative, ignore if positive.
# Example: Consider that you have a 300 x 300 bed with the max x and y positions being 300 and the min being 0. Your probe offsets are -20 for X and 10 for Y
# For mesh x min we ignore the x offset term because it is negative. Therefore mesh x min = 15
# For mesh y min we do not ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y min = 15
# For mesh x max we do not ignore the x offset term because it is negative. It is also greater than 15. Therefore mesh x max = 280
# For mesh y max we ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y max = 285
# The final result would be mesh_min: 15, 15 mesh_max: 280, 285
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

[safe_z_home]
home_xy_position: 115,115 # Change coordinates to the center of your print bed
speed: 200
z_hop: 10
z_hop_speed: 25

###############################Macros and related################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.

########################################
# Beta Z-offset
########################################
# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
# Learn the deal with z-offset with eddy probe here
# https://github.com/bigtreetech/Eddy?tab=readme-ov-file#my-z-offset-doesnt-seem-to-save-and-resets-is-there-a-work-around-or-fix
# basically the z offset should be zero, and special homing param sets the z value precisely

[save_variables]
filename: ~/printer_data/config/variables.cfg

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.0
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if printer["gcode_macro SET_GCODE_OFFSET"].restored|lower == 'false'%}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }

[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  {% set restored = params.restored|default('False')|string %} 
  {% set runtime_offset = params.runtime_offset|default(0)|float %}
  
  # Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
  # z-offset feature start ---------------->
  # if still adjusting
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
  {% endif %}
  # if finalized
  {% if params.Z %} 
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
      {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
      {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
  {% endif %}
  # <---------------- z-offset feature end
  SET_GCODE_OFFSET_ORIG { rawparams }

#---------------
# <<---------END of Beta Z-offset macros
#---------------

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.


# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
[gcode_macro G28]
rename_existing: G28.1
gcode:
  # KNOMI specific 
  # SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}
  # KNOMI specific
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}

# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}

#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
# [gcode_macro BED_MESH_CALIBRATE]
# rename_existing: BTT_BED_MESH_CALIBRATE
# gcode:
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg
#  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg


################### my custom macros for eddy

[gcode_macro EDDY_CALIBRATE]
gcode:
  PROBE_EDDY_CURRENT_CALIBRATE_AUTO CHIP=btt_eddy

[gcode_macro EDDY_TEMP_CALIBRATE]
gcode:
  M117 Turn off fans and AC!
  SET_IDLE_TIMEOUT TIMEOUT=36000
  M117 Initial Z offset measurement
  TEMPERATURE_PROBE_CALIBRATE PROBE=btt_eddy TARGET=56 STEP=4
  M117 CAUTION! Increasing bed and nozzle temp!
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=220
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=100

[gcode_macro EDDY_DRIVE_CURRENT_CALIBRATE]
gcode:
  G0 X115 Y115 F6000
  G0 Z20 F3000
  LDC_CALIBRATE_DRIVE_CURRENT CHIP=btt_eddy 

########################################
# user gcodes and macros
########################################

# [gcode_macro BED_MESH_CALIBRATE]
# rename_existing: BASE_BED_MESH_CALIBRATE
# gcode:
#     #before the original gcode
#     BED_MESH_CLEAR
#     QUAD_GANTRY_LEVEL
#     G1 X125 Y125 Z5 F6000
#     #the original gcode
#     BASE_BED_MESH_CALIBRATE
#     #after the original gcode

[respond]

# need to sort these into overrides and custom macros
[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_BASE
gcode:
  Z_TILT_ADJUST_BASE
  CENTRE_NOZZLE
  
[save_variables]
# filename: ./variables.cfg ; variable storage file
filename: ~/printer_data/config/variables.cfg

[gcode_macro ENABLE_START_PRINT_WITH_BEDMESH]
description: Save variable to enable bed mesh before start print
gcode:
  # https://www.reddit.com/r/klippers/comments/qdr0g9/my_gcode_macro_to_mesh_level_the_bed_every_10th/
  {% set value = "on"|string %}
  SAVE_VARIABLE VARIABLE=enable_start_print_with_bedmesh VALUE='"{value}"'
[gcode_macro DISABLE_START_PRINT_WITH_BEDMESH]
description: Save variable to disable bed mesh before start print
gcode:
  {% set value = "off"|string %}
  SAVE_VARIABLE VARIABLE=enable_start_print_with_bedmesh VALUE='"{value}"'

[gcode_macro GET_START_PRINT_WITH_BEDMESH]
description: get variable to disable bed mesh before start print
gcode:
  {% set enable_start_print_with_bedmesh = "off" %}
  {% set saved_variables = printer.save_variables.variables %}
  {action_respond_info("Value in the Config enable_start_print_with_bedmesh= " + saved_variables.enable_start_print_with_bedmesh|string) + "."} 
  {% if "enable_start_print_with_bedmesh" not in saved_variables %} ; first run
    {% set enable_start_print_with_bedmesh = "off" %}
  {% else %}
    {% if saved_variables.enable_start_print_with_bedmesh == 'off' %} ; first run
      {% set enable_start_print_with_bedmesh = "off" %}
    {% else %}
      {% set enable_start_print_with_bedmesh = "on" %}
    {% endif %}
    
  {% endif %}
  {action_respond_info("Conditional bed meshing is enable_start_print_with_bedmesh=" + enable_start_print_with_bedmesh|string) + "."} 

[gcode_macro CLEAN_NOZZLE]
description: Simple X-axis back and forth nozzle 
# description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
    {% set y_max = printer.toolhead.axis_maximum.x|int - 15 %}
    
    {% set wipe_count = params.WIPE_COUNT|default(4)|int %} # each count is a wipe in one-direction
    {% set wipe_start = params.WIPE_START|default(y_max)|int %} # each count is a wipe in one-direction
    {% set wipe_length = params.WIPE_LENGTH|default(15)|int %} # each count is a wipe in one-direction
    {% set layer = params.LAYER|default(0)|int %}; active layer number
    {% set clean_layers = params.CLEAN_LAYERS|default(10)|int %}; perform clean procedure every X layer
    
    {% if layer%clean_layers == 0 %} #the percent sign performs a modulo math operation, i.e., it calcs the remainder of a division operation
        SAVE_GCODE_STATE NAME=clean_nozzle_state
        {% set y_dir = 0|int %}
        {% if printer.toolhead.position.y > (printer.toolhead.axis_maximum.y - 10) %}: # check for potential nozzle movement interference with bed's edge retaining clips
            {% set y_dir = -1 %}
            {% elif printer.toolhead.position.y < (printer.toolhead.axis_minimum.y + 10) %}
                {% set y_dir = 1 %}
        {% endif %}
        G91
        G0 Z5 # avoid potential nozzle drag across existing print
        G90
        G0 Y{printer.toolhead.position.y|int + 10 * y_dir} F6000 # move nozzle away from edge clips
        {% set wipe_speed = 20000 %}
        {% for wipe in range(wipe_count) %} # simple X-axis back-and-forth wipe
            G0 X{wipe_start + (wipe_length * (loop.index is even))} F{wipe_speed}
        {% endfor %}
        RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=1 MOVE_SPEED=6000
    {% endif %}

[gcode_macro OOZERETRACT]
description: Drop some filament for clean print
gcode:  
  # nozzle droop
  G91
  # 40 needed 
  G1 E-2 F2000
  G90
  # nozzle droop
  
[gcode_macro FILAMENTDROOP]
description: Drop some filament for clean print
gcode:
  {% set LENGTH = params.LENGTH|default(5)|int %}
  {% set PARK = params.PARK|default("false")|string %}
  {% set z_park_delta = params.Z_DELTA|default(20.0)|float %}

  
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 10.0 %}
  
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}

  {% if PARK == "true" %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% endif %}
  
  # nozzle droop
  G91
  G1 E{LENGTH} F100
  G1 E-1 F2000
  G90
  G4 P5000
  # nozzle droop

# [gcode_macro SAFE_HOME]
# description: Home All Axes SAFELY
# gcode:
#   G28 Y
#   G28 X
#   BLTOUCH_DEBUG COMMAND=reset
#   BLTOUCH_DEBUG COMMAND=pin_down
#   G28 Z

[gcode_macro ZOFFSET]
description: Set z offset
gcode:
  # works only for bltouch
  PROBE_CALIBRATE
  # for btt eddy
  # PROBE_EDDY_CURRENT_CALIBRATE_AUTO CHIP=btt_eddy

; https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: DYN_BED_MESH_CALIBRATE
; gcode parameters
# variable_parameter_AREA_START : 0,0
# variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
# variable_mesh_area_offset : 5.0
; number of sample per probe point
# variable_probe_samples : 2
; minimum probe count
# variable_min_probe_count : 5
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
# variable_probe_count_scale_factor : 1.0
; enable preference index
# variable_enable_reference_index : False
gcode:
  {% set mesh_area_offset = params.mesh_area_offset|default(15.0)|float %}
  {% set probe_samples = params.probe_samples|default(2)|int %}
  {% set min_probe_count = params.min_probe_count|default(3)|int %}
  {% set probe_count_scale_factor = params.probe_count_scale_factor|default(1.0)|float %}
  {% set enable_reference_index = params.enable_reference_index|default('False')|string %}
  # {% set enable_reference_index = False %}
  
  {% if params.AREA_START and params.AREA_END %}
    {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
    {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
    {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
    {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
    {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
  
    {% set area_min_x = params.AREA_START.split(",")[0]|float %}
    {% set area_min_y = params.AREA_START.split(",")[1]|float %}
    {% set area_max_x = params.AREA_END.split(",")[0]|float %}
    {% set area_max_y = params.AREA_END.split(",")[1]|float %}
    
    {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
      {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
      {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
    {% else %}
      {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
      {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
    {% endif %}
    
    {% set meshMaxPointX = meshPointX %}
    {% set meshMaxPointY = meshPointY %}
    
    
    {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
      {% if area_min_x - mesh_area_offset >=  safe_min_x %}
        {% set area_min_x = area_min_x - mesh_area_offset %}
      {% else %}
        {% set area_min_x = safe_min_x %}
      {% endif %}
      
      {% if area_min_y - mesh_area_offset >=  safe_min_y %}
        {% set area_min_y = area_min_y - mesh_area_offset %}
      {% else %}
        {% set area_min_y = safe_min_y %}
      {% endif %}
      
      {% if area_max_x + mesh_area_offset <=  safe_max_x %}
        {% set area_max_x = area_max_x + mesh_area_offset %}
      {% else %}
        {% set area_max_x = safe_max_x %}
      {% endif %}
      
      {% if area_max_y + mesh_area_offset <=  safe_max_y %}
        {% set area_max_y = area_max_y + mesh_area_offset %}
      {% else %}
        {% set area_max_y = safe_max_y %}
      {% endif %}
      
      {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
      {% if meshPointX < min_probe_count %}
        {% set meshPointX = min_probe_count %}
      {% endif %}
      {% if meshPointX > meshMaxPointX %}
        {% set meshPointX = meshMaxPointX %}
      {% endif %}
      
      {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
      {% if meshPointY < min_probe_count %}
        {% set meshPointY = min_probe_count %}
      {% endif %}
      {% if meshPointY > meshMaxPointY %}
        {% set meshPointY = meshMaxPointY %}
      {% endif %}
      
      {% set algorithm = "bicubic" %}
      {% if "algorithm" in bedMeshConfig %}
        {% set algorithm = bedMeshConfig.algorithm %}
      {% endif %}
      {% if meshPointX >=7 or meshPointY >=7 %}
        {% set algorithm = "bicubic" %}
      {% endif %}
      
      {% if enable_reference_index|lower == 'true' %}
          {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
          DYN_BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex} METHOD=rapid_scan
      {% else %}
          DYN_BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} METHOD=rapid_scan
      {% endif %}
    {% else %}
      DYN_BED_MESH_CALIBRATE
    {% endif %}
  {% else %}
    DYN_BED_MESH_CALIBRATE
  {% endif %}
# end of bltouch section

[gcode_macro Z_TILT_ADJUST_IF_NOT_ADJUSTED]
variable_adjusted: 0
gcode:
  Z_TILT_ADJUST
  G28 Z
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST_IF_NOT_ADJUSTED VARIABLE=adjusted VALUE=1

[gcode_macro M18]
rename_existing: M1800
gcode:
  M1800
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST_IF_NOT_ADJUSTED VARIABLE=adjusted VALUE=0

[gcode_macro M84]
rename_existing: M8400
gcode:
  M8400
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST_IF_NOT_ADJUSTED VARIABLE=adjusted VALUE=0

# prime line
# plan to make this dynamic to area stard and end
[gcode_macro PRIME_LINE]
# variable_parameter_AREA_START : 0,0
# variable_parameter_AREA_END : 0,0
variable_parameter_OFFSET : 5
# variable_parameter_POSITION : 'top' # top | bottom | right | left ; --reverse
gcode:
    {% set offset = params.OFFSET|default(5)|int %}

    # {% set bedMeshConfig = printer["configfile"].config["bltouch"] %}    
    # {% set x_offset = bedMeshConfig.x_offset|float %}
    {% set bedMeshConfig = printer["configfile"].config["probe_eddy_current btt_eddy"] %}    
    {% set x_offset = bedMeshConfig.x_offset|float %}
    # btt_eddy

    {% set xConfig = printer["configfile"].config["stepper_x"] %}
    {% set xBedMax = xConfig.position_max|int %}
    {% set yConfig = printer["configfile"].config["stepper_y"] %}
    {% set yBedMax = yConfig.position_max|int %}

    # {% set area_min_x = params.AREA_START.split(",")[0]|float %}
    # {% set area_min_y = params.AREA_START.split(",")[1]|float %}
    # {% set area_max_x = params.AREA_END.split(",")[0]|float %}
    # {% set area_max_y = params.AREA_END.split(",")[1]|float %}

    # calculate 4 points
    {% set xmax =  xBedMax - offset + x_offset %}
    {% set xmin =  offset %}
    {% set ymax =  yBedMax - offset%}
    {% set ymin =  offset %}

    # Prime line sequence
	G1 Z5 F3000 ; lift
	G1 X{xmin} Y{ymin} F6000 ; move to prime position
	G1 Z0.15 F3000 ; get ready to prime
	G92 E0 ; reset extrusion distance
	G1 X{xmax} E30 F6000 ; prime nozzle with adjusted extrusion / E__ based on how much you like
	
	# String removal circle after priming
	G1 Z0.2 F3000 ; adjust to 0.2mm above the bed
	G1 Y15 F10000 ; move the toolhead in the Y direction by 15 units
	
	# Execute the circle 3 times
	G2 I-5 J0 F10000 ; circle with 5mm radius
	G2 I-5 J0 F10000
	G2 I-5 J0 F10000

    
    # --- original code
	# # Prime line sequence
	# G1 Z5 F3000 ; lift
	# G1 X20 Y5 F1500 ; move to prime position
	# G1 Z0.15 F3000 ; get ready to prime
	# G92 E0 ; reset extrusion distance
	# G1 X200 E30 F600 ; prime nozzle with adjusted extrusion / E__ based on how much you like
	
	# # String removal circle after priming
	# G1 Z0.2 F3000 ; adjust to 0.2mm above the bed
	# G1 Y15 F10000 ; move the toolhead in the Y direction by 15 units
	
	# # Execute the circle 3 times
	# G2 I-5 J0 F10000 ; circle with 5mm radius
	# G2 I-5 J0 F10000
	# G2 I-5 J0 F10000
    # ---  end of original code
    
[gcode_macro START_PRINT]
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(200)|int %}
    {% set bed_temp = params.BED_TEMP|default(60)|int %}
    # ----
    # PREHEAT PROCEDURE
    # ----

    # # Set and wait for nozzle to reach temperature
    # # M109 S{extruder_temp}
    M104 S{extruder_temp}
    # Start bed heating
    M140 S{bed_temp}
    # Use absolute coordinates
    G90
    # Home the printer
    G28 
    # conditional homing, doesn't work reliably because sometimes the printer sets
    # arbitrary coordinates after print ends
    # {% if "xyz" not in printer.toolhead.homed_axes %}
    #     G28 ; home if not already homed
    # {% endif %}
    Z_TILT_ADJUST_IF_NOT_ADJUSTED
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Wait for bed to reach temperature
    # M190 S{bed_temp}

    # ----
    # Dynamic Bed mesh calibrate START
    # ----
    # conditional based on config variable
    {% set saved_variables = printer.save_variables.variables %}

    {% if saved_variables.enable_start_print_with_bedmesh == 'off' %} ; first run
      M117 Bed mesh at start is disabled
    {% else %}
      M117 Pre-print bed mesh
      BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    {% endif %}

    TOOLHEAD_PARK
    # Set and wait for nozzle to reach temperature
    # M104 S{extruder_temp}
    M109 S{extruder_temp}
    M190 S{bed_temp}

    # optional
    # PRIME_LINE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}

    # clean nozzle
    # CLEAN_NOZZLE
    
    # Print message on LCD
    # FILAMENTDROOP PARK="true"
    M117 By your command!
# --------------------------------------------------------------------

# ---------------------------- End Print -----------------------------
[gcode_macro END_PRINT]
gcode:
    {% set machine_depth = params.machine_depth|default(235)|int %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 10.0 %}
    {% set z_park_delta = 10.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
      {% set z_safe = z_park_delta %}
    {% else %}
      {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Relative positionning
    G91
    # Retract and raise Z
    G1 Z0.2 E-2 F3000
    # Wipe out
    G1 X5 Y5 F6000
    # Raise Z more
    G1 Z10
    # Absolute positionning
    G90
    # Present print
    {% if "xyz" in printer.toolhead.homed_axes %}
      G91
      G1 Z{z_safe} F6000
      G90
      G1 X{x_park} Y{y_park} F6000
      {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}
    # Disable steppers
    M84
    # Print message on LCD
    M117 That's All Folks
    OOZERETRACT
    # SAVE_CONFIG

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  OOZERETRACT
  # _TOOLHEAD_PARK_PAUSE_CANCEL
  PARK_NOZZLE
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = params.extrude|default(1.0)|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    # G1 E{extrude} F2100
    G1 E{extrude} F6000
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  # always clean nozzle before resuming
  # CLEAN_NOZZLE
  
  RESUME_BASE {get_params}
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  {% set extrude = params.extrude|default(1.0)|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park_offset = 25.0 %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - x_park_offset %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F6000
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F6000
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro TOOLHEAD_PARK]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}

  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F6000
    G90
    G1 X{x_park} Y{y_park} F10000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro BED_TRAMMING]
description: Bed Tramming
gcode:
  G28
  BED_SCREWS_ADJUST

[gcode_macro BED_MESH_UPDATE]
description: Bed Mesh Update
gcode:
  G28
  BASE_BED_MESH_CALIBRATE
  SAVE_CONFIG


[bed_screws]
# screw1: 33, 33
# screw2: 202, 33
# screw3: 202, 202
# screw4: 33, 202
screw1: 20,29
screw2: 195, 29
screw3: 195, 213
screw4: 20, 213

[gcode_macro PREHEAT_NOZZLE]
description: Preheat nozzle to set temp
gcode:
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=185

[gcode_macro PREHEAT_BED]
description: Preheat bed to set temp
gcode:
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50

# prime the nozzle 
[gcode_macro LEVEL_CHECK]
gcode:
    M117 Level Check
    M104 S200 ;set nozzle to 190
    M190 S50 ;set and wait till bed temp reaches 50

    G28
    M83 ;relative extrusion
    G92 E0 ;Reset Extruder
    # move z axis 
    G1 Z2.0 F3000 ;Move Z Axis up
    # move to prime position 
    G1 X5 Y5 Z0.2 F5000.0 ;Move to start position
    G1 X5 Y200.0 Z0.2 F1500.0 E15 ;Draw the first line
    G0 X10 Y200.0 Z0.2 F5000.0 ;Move to side a little
    G1 X10 Y1 Z0.2 F1500.0 E15 ;Draw the second line
    # move z axis 
    G0 Z20.0 F3000 ;Move Z Axis up
    # move to bed check position 
    G0 X33 Y202 Z0.2 F5000.0 ;Move to start position
    G1 X202 Y33 Z0.2 F1500.0 E23.9 ;Draw the first line
    G0 X202 Y202 Z0.2 F5000.0
    G1 X33 Y33 Z0.2 F1500.0 E23.9 ;Draw the second line
    G1 X202 Y33 Z0.2 F1500.0 E16.9 ;Draw the third line
    G1 X202 Y202 Z0.2 F1500.0 E16.9 ;Draw the fourth line
    G1 X33 Y202 Z0.2 F1500.0 E16.9 ;Draw the fifth line
    G1 X33 Y33 Z0.2 F1500.0 E16.9 ;Draw the sixth line
    G92 E0 ;Reset Extruder
    G0 Z20.0 F3000 ;Move Z Axis up

[gcode_macro DRY_LEVEL_CHECK]
gcode:
    M117 Level Check

    G28
    M83 ;relative extrusion               
    # move to bed check position 
    G0 X33 Y202 Z1.00 F5000.0 ;Move to start position
    G0 X202 Y33 Z1.00 F1500.0 ;Draw the first line
    G0 X202 Y202 Z1.00 F5000.0
    G0 X33 Y33 Z1.00 F1500.0 ;Draw the second line
    G0 X202 Y33 Z1.00 F1500.0 ;Draw the third line
    G0 X202 Y202 Z1.00 F1500.0 ;Draw the fourth line
    G0 X33 Y202 Z1.00 F1500.0 ;Draw the fifth line
    G0 X33 Y33 Z1.00 F1500.0 ;Draw the sixth line
    G92 E0 ;Reset Extruder
    G0 Z20.0 F3000 ;Move Z Axis up

[gcode_macro PROBE_CENTER]
gcode:
    M117 Probe Center

    G28
    M83 ;relative extrusion               
    # move to bed check position 
    G0 X146.8 Y155.5 F1500.0 ;Draw the first line
    G92 E0 ;Reset Extruder
    G0 Z20.0 F3000 ;Move Z Axis up

[gcode_macro PID_TUNER]
gcode:
  {% set EXTRUDER_TEMPERATURE = params.EXTRUDER_TEMPERATURE.x|default(200)|int %}
  {% set BED_TEMPERATURE = params.BED_TEMPERATURE.x|default(60)|int %}
  
  PID_CALIBRATE HEATER=extruder TARGET={EXTRUDER_TEMPERATURE}
  PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMPERATURE}
  SAVE_CONFIG

[gcode_macro PID_TUNER_NOZZLE]
gcode:
  {% set EXTRUDER_TEMPERATURE = params.EXTRUDER_TEMPERATURE.x|default(200)|int %}
  
  PID_CALIBRATE HEATER=extruder TARGET={EXTRUDER_TEMPERATURE}
  SAVE_CONFIG

[gcode_macro PID_TUNER_HOTBED]
gcode:
  {% set BED_TEMPERATURE = params.BED_TEMPERATURE.x|default(60)|int %}
  
  PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMPERATURE}
  SAVE_CONFIG

[gcode_macro PRESSURE_ADVANCE_PREP]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro FIRSTLAYERPATCH]
description: Set z offset by printing a test print
gcode:
  SDCARD_PRINT_FILE FILENAME="Cube_PLA_5m57s.gcode"

[gcode_macro BEDLEVELCHECK]
description: Check bed leveling
gcode:
  SDCARD_PRINT_FILE FILENAME="bed-check-0.2mm_PLA+_13m13s.gcode"

[gcode_macro ZLEVELCALIBRATE]
description: Check bed leveling
gcode:
  SDCARD_PRINT_FILE FILENAME="First_Layer_Patch-0.25mm_PLA_35s.gcode"

[exclude_object]

[idle_timeout] 
timeout: 43200
gcode:
    # 12 hours to time out
    # 3600 * 12
    {% if printer.pause_resume.is_paused %}
        # M118 Bypassed Timeout
        M117 Bypassed Timeout
    {% else %}
        # M118 Timeout Reached - Heaters and Motors Still On!
        M117 Timeout Reached - Heaters and Motors Still On!
        # comment this to bypass timeout
        TURN_OFF_HEATERS
        M84
    {% endif %}


[gcode_macro TEST_PROMPT]
description: Set z offset by printing a test print
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Question"
  RESPOND TYPE=command MSG="action:prompt_text Do you wont to cancel the print?"
  RESPOND TYPE=command MSG="action:prompt_footer_button continue| PROBE_CENTER | RESPOND type=command msg=action:prompt_end"
  RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|CANCEL_PRINT|error"
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro M600]
description: Manual filament change override
gcode:
  PAUSE
  
[gcode_arcs]
resolution: 0.1

[gcode_macro INPUTSHAPER_Y]
gcode:
  SHAPER_CALIBRATE AXIS=Y

[gcode_macro INPUTSHAPER_X]
gcode:
  SHAPER_CALIBRATE AXIS=X

[gcode_macro CENTRE_NOZZLE]
gcode:
  # bed is 235 x 235
  # bed is 230 x 230
  G0 X115 Y115 F6000

[gcode_macro WARM_UP_BED]
description: Preheat bed to set temp
gcode:
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=55

[gcode_macro HEAT_UP_BED]
description: Preheat bed to set temp
gcode:
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=40

[gcode_macro FORCE_HOME]
description: Preheat bed to set temp
gcode:
  {% set x = params.X|default(0)|float %}
  {% set y = params.Y|default(0)|float %}
  {% set z = params.Z|default(0)|float %}
  SET_KINEMATIC_POSITION X={x} Y={y} Z={z}

[gcode_macro PARK_NOZZLE]
description: Move nozzle to X Max
# description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
  {% set x_max = printer.toolhead.axis_maximum.x|int%}
  G0 X{x_max} F6000 # move nozzle away from edge clips

[gcode_macro PUSH_BED]
description: Move bed to Y Min
# description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
  {% set y_min = printer.toolhead.axis_minimum.y|int%}
  G0 Y{y_min} F6000 # move nozzle away from edge clips

[gcode_macro POP_BED]
description: Move bed to Y MAX
# description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
  {% set y_max = printer.toolhead.axis_maximum.y|int%}
  G0 Y{y_max} F6000 # move nozzle away from edge clips

[gcode_macro CLEAR_PRINTHEAD]
description: Move X to 0
# description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
  G0 X0 F6000 # move nozzle away from edge clips

[respond]

# test macro to try prompts
[gcode_macro Z_EDDY]
description: Move Z to 0
# description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin MacroPrompt"
  RESPOND TYPE=command MSG="action:prompt_text Are you sure you want to do this?"
  RESPOND TYPE=command MSG="action:prompt_text Make sure :"
  RESPOND TYPE=command MSG="action:prompt_text - Bed and nozzle is heated"
  RESPOND TYPE=command MSG="action:prompt_text - Nozzle is centered"
  RESPOND TYPE=command MSG="action:prompt_text - You have a paper placed beneath"
  RESPOND TYPE=command MSG="action:prompt_button_group_start"
  RESPOND TYPE=command MSG="action:prompt_button PROCEED|G0 Z0 F600|primary"
  RESPOND TYPE=command MSG="action:prompt_button CANCEL|RESPOND TYPE=command MSG=action:prompt_end|secondary"
  RESPOND TYPE=command MSG="action:prompt_button_group_end"
  RESPOND TYPE=command MSG="action:prompt_show"
  # G0 Z0 F600 # move nozzle away from edge clips

[respond]
[gcode_macro MANUAL_FILAMENT_LOAD]
description: Move Z to 0
# description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
  # load
  # 50 is default
  {% set LENGTH = params.LENGTH|default(50)|int %}
  # F = mm/min, F300 = 300mm/min = 5mm/s 
  G1 E{LENGTH} F300
  CENTRE_NOZZLE
  PARK_NOZZLE
  CLEAN_NOZZLE
  
  # second clean
  G1 E{LENGTH/2} F300
  CENTRE_NOZZLE
  PARK_NOZZLE
  CLEAN_NOZZLE
  
  RESPOND TYPE=command MSG="action:prompt_begin MacroPrompt"
  RESPOND TYPE=command MSG="action:prompt_text Please confirm filament has been loaded"
  RESPOND TYPE=command MSG="action:prompt_button_group_start"
  RESPOND TYPE=command MSG="action:prompt_button RESUME PRINT|RESUME|primary"
  RESPOND TYPE=command MSG="action:prompt_button Re-Load Filament|MANUAL_FILAMENT_LOAD|secondary"
  RESPOND TYPE=command MSG="action:prompt_button CANCEL|RESPOND TYPE=command MSG=action:prompt_end|warning"
  RESPOND TYPE=command MSG="action:prompt_button_group_end"
  RESPOND TYPE=command MSG="action:prompt_show"
  # G0 Z0 F600 # move nozzle away from edge clips
  
[respond]
[gcode_macro MANUAL_FILAMENT_SWAP]
description: Move Z to 0
# description: Simple X-axis back and forth nozzle wipe performed wipe_count/2 times. Two PARAMETERS are both optional. The LAYER parameter provides the current layer info from your slicer's Layer Change G-code and CLEAN_LAYERS provides the iteration control for how frequently the nozzle procedure is actually performed. Defaults to 1, i.e., every layer. E.g. , CLEAN_NOZZLE LAYER={[layer_num] CLEAN_LAYERS=3 will clean the nozzle every third layer. Omitting the parameters forces the clean to be performed. While wipe_count could be changed to a parameter, once you determine how many wipes are sufficient it's simpler to set its value within the macro and fuhgetaboutit.
gcode:
  # unload
  # 50 is default
  {% set LENGTH = params.LENGTH|default(50)|int %}
  PARK_NOZZLE
  # F = mm/min, F300 = 300mm/min = 5mm/s 
  G1 E-{LENGTH} F300
  
  RESPOND TYPE=command MSG="action:prompt_begin MacroPrompt"
  RESPOND TYPE=command MSG="action:prompt_text Please insert new filament"
  RESPOND TYPE=command MSG="action:prompt_button_group_start"
  RESPOND TYPE=command MSG="action:prompt_button PROCEED|MANUAL_FILAMENT_LOAD|primary"
  RESPOND TYPE=command MSG="action:prompt_button CANCEL|RESPOND TYPE=command MSG=action:prompt_end|secondary"
  RESPOND TYPE=command MSG="action:prompt_button_group_end"
  RESPOND TYPE=command MSG="action:prompt_show"
  
#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.185387, 0.210614, 0.221682, 0.224881, 0.216729, 0.174209, 0.180150, 0.188513, 0.189327, 0.188531, 0.195122, 0.184498, 0.181244, 0.190583, 0.173516
#*# 	  0.231678, 0.251695, 0.268237, 0.266182, 0.254893, 0.225904, 0.206106, 0.218611, 0.231783, 0.214548, 0.219787, 0.208319, 0.181084, 0.194374, 0.195519
#*# 	  0.234774, 0.255992, 0.271086, 0.278209, 0.267891, 0.218063, 0.208746, 0.223576, 0.231285, 0.231014, 0.236185, 0.208461, 0.206707, 0.226092, 0.220281
#*# 	  0.249826, 0.260174, 0.289887, 0.278800, 0.271988, 0.218837, 0.236370, 0.250075, 0.258090, 0.243365, 0.252158, 0.224053, 0.228129, 0.242311, 0.243855
#*# 	  0.213911, 0.235867, 0.254313, 0.257061, 0.253692, 0.195014, 0.197624, 0.208979, 0.217686, 0.217686, 0.222622, 0.199949, 0.201397, 0.212532, 0.212530
#*# 	  0.209072, 0.224683, 0.246838, 0.232763, 0.231446, 0.171146, 0.199062, 0.203712, 0.211865, 0.200816, 0.206912, 0.167445, 0.179062, 0.185002, 0.194791
#*# 	  0.210518, 0.233653, 0.253297, 0.256360, 0.242665, 0.193897, 0.184155, 0.194773, 0.208438, 0.207274, 0.203788, 0.190125, 0.183361, 0.193641, 0.191887
#*# 	  0.180023, 0.196689, 0.222302, 0.221046, 0.211457, 0.152397, 0.166988, 0.187487, 0.194482, 0.186158, 0.194000, 0.155566, 0.170970, 0.180963, 0.188515
#*# 	  0.174892, 0.201052, 0.222016, 0.231692, 0.218790, 0.166491, 0.148286, 0.175674, 0.179726, 0.178098, 0.175676, 0.161364, 0.164087, 0.166526, 0.165980
#*# 	  0.163865, 0.175226, 0.202319, 0.205314, 0.193093, 0.138658, 0.158548, 0.177726, 0.181796, 0.173957, 0.173692, 0.139072, 0.156249, 0.177321, 0.178951
#*# 	  0.175773, 0.188728, 0.205235, 0.207642, 0.205009, 0.159635, 0.162608, 0.166909, 0.174483, 0.178004, 0.176548, 0.162046, 0.164188, 0.170434, 0.164311
#*# 	  0.167135, 0.181202, 0.197986, 0.194848, 0.187210, 0.125956, 0.156685, 0.176395, 0.172627, 0.169654, 0.161266, 0.128512, 0.145837, 0.160154, 0.162862
#*# 	  0.160393, 0.164179, 0.183908, 0.187096, 0.181418, 0.139135, 0.147493, 0.149216, 0.155575, 0.160891, 0.157370, 0.149111, 0.151328, 0.157539, 0.150512
#*# 	  0.126795, 0.136938, 0.155336, 0.158110, 0.147111, 0.068798, 0.124883, 0.148265, 0.149417, 0.144803, 0.141909, 0.109865, 0.133699, 0.148826, 0.158636
#*# 	  0.136634, 0.148682, 0.164254, 0.166669, 0.154493, 0.112352, 0.123607, 0.128829, 0.131397, 0.137470, 0.129676, 0.122731, 0.123035, 0.127085, 0.117548
#*# 	  0.109819, 0.128294, 0.141104, 0.145050, 0.134083, 0.062059, 0.104375, 0.128462, 0.133969, 0.133382, 0.135973, 0.095683, 0.120952, 0.146375, 0.147574
#*# 	  0.117845, 0.122765, 0.151265, 0.153144, 0.132565, 0.099660, 0.113491, 0.111204, 0.117112, 0.121749, 0.124058, 0.110774, 0.110490, 0.119441, 0.113670
#*# 	  0.092710, 0.099714, 0.132055, 0.126547, 0.118772, 0.052295, 0.091244, 0.113233, 0.110641, 0.111512, 0.113516, 0.083671, 0.106118, 0.121899, 0.131416
#*# 	  0.098663, 0.111921, 0.127209, 0.142235, 0.119696, 0.084341, 0.094157, 0.095299, 0.095310, 0.104303, 0.105975, 0.090739, 0.097002, 0.105149, 0.097298
#*# 	  0.064143, 0.080891, 0.109241, 0.116146, 0.107833, 0.041011, 0.083412, 0.102496, 0.112948, 0.111990, 0.112361, 0.092659, 0.114386, 0.137793, 0.146743
#*# 	  0.087332, 0.099043, 0.120964, 0.125298, 0.102316, 0.066470, 0.081350, 0.085562, 0.085195, 0.098128, 0.090529, 0.080156, 0.081004, 0.086317, 0.104289
#*# x_count = 15
#*# y_count = 21
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 69.5687
#*# max_x = 165.3287
#*# min_y = 41.9155
#*# max_y = 172.91550000000004
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 18.464
#*# pid_ki = 1.231
#*# pid_kd = 69.240
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 69.204
#*# pid_ki = 1.377
#*# pid_kd = 869.371
#*#
#*# [input_shaper]
#*# shaper_type_x = ei
#*# shaper_freq_x = 31.4
#*# shaper_type_y = mzv
#*# shaper_freq_y = 37.0
#*#
#*# [probe_eddy_current btt_eddy]
#*# reg_drive_current = 17
#*# calibrate =
#*# 	0.050000:3227931.727,0.090000:3227124.210,0.130000:3226294.057,
#*# 	0.170000:3225489.879,0.210000:3224678.548,0.250000:3223929.074,
#*# 	0.290000:3223141.530,0.330000:3222360.610,0.370000:3221644.251,
#*# 	0.410000:3220933.042,0.450000:3220150.162,0.490000:3219459.517,
#*# 	0.530000:3218784.891,0.570000:3218102.966,0.610000:3217417.407,
#*# 	0.650000:3216797.410,0.690000:3216117.136,0.730000:3215511.598,
#*# 	0.770000:3214878.928,0.810000:3214249.692,0.850000:3213666.773,
#*# 	0.890000:3213070.663,0.930000:3212472.684,0.970000:3211915.684,
#*# 	1.010000:3211346.079,1.050000:3210813.871,1.090000:3210247.653,
#*# 	1.130000:3209739.191,1.170000:3209212.557,1.210000:3208706.639,
#*# 	1.250000:3208209.016,1.290000:3207711.501,1.330000:3207226.586,
#*# 	1.370000:3206757.102,1.410000:3206272.634,1.450000:3205796.905,
#*# 	1.490000:3205373.758,1.530000:3204939.764,1.570000:3204481.427,
#*# 	1.610000:3204056.179,1.650000:3203642.354,1.690000:3203240.838,
#*# 	1.730000:3202835.652,1.770000:3202440.668,1.810000:3202044.404,
#*# 	1.850000:3201660.896,1.890000:3201271.494,1.930000:3200911.013,
#*# 	1.970000:3200566.228,2.010000:3200176.666,2.050000:3199807.761,
#*# 	2.090000:3199468.569,2.130000:3199132.651,2.170000:3198800.996,
#*# 	2.210000:3198457.174,2.250000:3198128.423,2.290000:3197804.823,
#*# 	2.330000:3197513.351,2.370000:3197193.196,2.410000:3196908.520,
#*# 	2.450000:3196601.755,2.490000:3196314.739,2.530000:3196019.353,
#*# 	2.570000:3195747.027,2.610000:3195503.307,2.650000:3195215.556,
#*# 	2.690000:3194944.130,2.730000:3194670.516,2.770000:3194418.315,
#*# 	2.810000:3194173.597,2.850000:3193929.421,2.890000:3193672.113,
#*# 	2.930000:3193431.938,2.970000:3193217.994,3.010000:3192969.244,
#*# 	3.050000:3192732.784,3.090000:3192537.047,3.130000:3192306.664,
#*# 	3.170000:3192102.278,3.210000:3191861.309,3.250000:3191632.002,
#*# 	3.290000:3191482.308,3.330000:3191259.334,3.370000:3191065.668,
#*# 	3.410000:3190864.112,3.450000:3190667.020,3.490000:3190457.612,
#*# 	3.530000:3190276.025,3.570000:3190090.775,3.610000:3189917.337,
#*# 	3.650000:3189728.460,3.690000:3189550.837,3.730000:3189370.444,
#*# 	3.770000:3189190.634,3.810000:3189020.350,3.850000:3188854.747,
#*# 	3.890000:3188695.934,3.930000:3188545.706,3.970000:3188385.145,
#*# 	4.010000:3188175.966,4.050000:3188067.486
#*#
#*# [temperature_probe btt_eddy]
#*# calibration_temp = 35.662120
#*# drift_calibration =
#*# 	3238655.244496, -423.864229, 1.725591
#*# 	3224328.576081, -222.036907, 0.210940
#*# 	3213936.170060, -106.274978, -0.564168
#*# 	3206208.629644, -35.804884, -1.006348
#*# 	3199806.809917, 27.116431, -1.417870
#*# 	3194977.179757, 66.509551, -1.641151
#*# 	3191280.849001, 89.824846, -1.735650
#*# 	3188553.248780, 95.855817, -1.686414
#*# 	3185598.453880, 131.752584, -1.984019
#*# drift_calibration_min_temp = 37.61631025630652
